enum_property CaretStyle {
	"TerminalCtrl::Caret::BLOCK",
	"TerminalCtrl::Caret::BEAM",
	"TerminalCtrl::Caret::UNDERLINE"
};

ctrl TerminalCtrl {
	group "Complex";


	Frame      SetFrame        = FieldFrame() @1;
	Font       SetFont         = Monospace();
	Color      Ink             = :SBlack;
	Color      Paper           = :SWhite;
	bool       NoBackground    = false;
	bool       AdjustColors    = true;
	bool       ShowSizeHint    = true;
	bool       History         = true;
	int        SetHistorySize  = 65536;
	bool       ShowScrollBar   = false;
	bool       BlinkingText    = true;
	int        BlinkInterval   = 500;
	CaretStyle SetCursorStyle  = TerminalCtrl::Caret::BLOCK @1;
	bool       LockCursor      = false;
	bool       InlineImages    = false;
	bool       Hyperlinks      = false;
	bool       WindowActions   = false;
	bool       WindowReports   = false;
	bool       DelayedRefresh  = true;
	bool       LazyResize      = false;

	FontSize() {
		return GetTextSize("X", .SetFont);
	}
	
	GetMinSize() { sz = FontSize(); sz.cx *= 2;  sz.cy *= 2;  return sz; }
	GetStdSize() { sz = FontSize(); sz.cx *= 80; sz.cy *= 24; return sz; }

	InflateRect(r, n)	{
		r.left   -= n;
		r.top    -= n;
		r.right  += n;
		r.bottom += n;
		return r;
	}

	ViewRect(w) {
		r = GetRect();
		DrawCtrlFrame(w, r, .SetFrame);
		return r;
	}
	
	ViewSize(w) {
		r = ViewRect(w);
		return Size(r.right - r.left, r.bottom - r.top);
	}

	SizeHint(w) {
		wsz = ViewSize(w);
		fsz = FontSize();
		hcx = (wsz.cx - (.ShowScrollBar ? fsz.cy : 0)) / fsz.cx;
		hcy = wsz.cy / fsz.cy;
		return Size(int(hcx), int(hcy));
	}
	
	PaintCenterRect(w, x, y, sz) {
		r = RectC(x - sz.cx / 2, y - sz.cy / 2, sz.cx, sz.cy);
		w.DrawRect(InflateRect(r, 7), :SBlack);
		DrawCtrlFrame(w, InflateRect(r, 8), "FieldFrame()");
	}

	PaintSizeHint(w, x, y) {
		hsz = SizeHint(w);
		txt = IntStr(hsz.cx) + " x " + IntStr(hsz.cy);
		tsz = GetTextSize(txt, StdFont());
		PaintCenterRect(w, x, y, tsz);
		PaintCenterText(w, x, y, txt, StdFont(), :SWhite);
	}
	
	PaintCaret(w, x, y, sz) {
		switch(.SetCursorStyle) {
		case "TerminalCtrl::Caret::BLOCK": /* NOP */ break;
		case "TerminalCtrl::Caret::BEAM": sz.cx = 1; break;
		case "TerminalCtrl::Caret::UNDERLINE": y = sz.cy - 1; sz.cy = 1; break;
		}
		w.DrawRect(x, y, sz.cx, sz.cy, .LockCursor ? :SLtGray : :SBlack);
	}
	
	PaintLine(w, x, y, text) {
		fsz = FontSize();
		tsz = GetTextSize(text, .SetFont);
		w.DrawText(x, y + 2, text, .SetFont, .Ink);
		PaintCaret(w, x + tsz.cx + 4, y + 2, fsz);
	}
	
	Paint(w) {
		r  = ViewRect(w);
		prompt = "[user@hostname ~]$";
		
		if(!.NoBackground)
			w.DrawRect(r, .Paper);

		PaintLine(w, r.left, r.top, prompt);
		
		if(.ShowScrollBar) {
			rsb = r;
			r.right = rsb.left = rsb.right - FontSize().cy;
			PaintVScrollBar(w, rsb);
		}

		if(.ShowSizeHint)
			PaintSizeHint(w, (r.left + r.right) / 2, (r.top + r.bottom) / 2);
	}
}
